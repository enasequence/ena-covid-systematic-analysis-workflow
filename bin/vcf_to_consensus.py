#!/usr/bin/env python 

import argparse
import pysam

parser = argparse.ArgumentParser(description='Consensus generation script from VCF and depth file')

parser.add_argument('-v',
                    '--vcffile',
                    help="VCF file to turn into consensus",
                    type=str,
                    required=True)

parser.add_argument('-d',
                    '--depthfile',
                    help="TSV file with depth information per position as generated by 'samtools depth'",
                    type=str,
                    required=True)

parser.add_argument('-o',
                    '--outfile',
                    help='Output path for consensus',
                    type=str,
                    required=True)

parser.add_argument('-n',
                    '--outname',
                    help='Name to be given to the output consensus sequence',
                    type=str,
                    required=True)

parser.add_argument('-dp',
                    '--mindepth',
                    help='Minimal depth at which to not consider any alternative alleles',
                    default=100,
                    type=int,
                    required=False)

parser.add_argument('-af',
                    '--minAF',
                    help='Minimal allele frequency to call variant output',
                    default=0.25,
                    type=float,
                    required=False)

parser.add_argument('-r',
                    '--reference',
                    help='Reference genome, must be the same that was used to generate the VCF',
                    type=str,
                    required=True)

args = parser.parse_args()


def makeConsensus(vcffile, depthfile, mindepth, minAF, reference):
    variant_dict = {}
    for rec in pysam.VariantFile(vcffile).fetch():
        # Skip positions with no alternative allele
        if len(rec.alleles) < 2:
            continue
        # Skip positions with an allele frequency below threshold
        if rec.info['AF'] < minAF:
            continue
        # Add the reference and alternative allele to the variant dictionary
        variant_dict[rec.pos] = (rec.alleles[0], rec.alleles[1])

    depth_failures = []
    with open(depthfile) as f:
        for line in f:
            pos, allele, dp = line.strip().split(',')
            # Add positions to depth failures if below depth threshold
            if int(dp) < mindepth:
                depth_failures.append(int(pos))

    consensus = []
    with pysam.FastxFile(args.reference) as file:
        for ref in file:
            pos = 1
            while pos < len(ref.sequence):
                # Append N to reference if depth is insufficient
                if pos in depth_failures:
                    consensus.append('N')
                # Append alternative allele to consensus if it has been accepted
                elif pos in variant_dict:
                    consensus.append(variant_dict[pos][1])
                    # If ref is bigger than alt, we have a deletion and have to increment pos by the deletion size
                    ref_len = len(variant_dict[pos][0])
                    alt_len = len(variant_dict[pos][1])
                    if ref_len > alt_len:
                        pos += (ref_len - alt_len)
                # Keep the reference allele if there is sufficient depth and no variant
                else:
                    consensus.append(ref.sequence[pos - 1])  # fasta is 0 based
                # Increment pos
                pos += 1
            break  # Ref file should only contain a single reference

    return (''.join(consensus))


if __name__ == '__main__':
    consensus = makeConsensus(args.vcffile, args.depthfile, args.mindepth, args.minAF, args.reference)
    with open(args.outfile, 'w') as out_consensus:
        print(''.join(['>', args.outname]), file=out_consensus)
        print(consensus, file=out_consensus)
